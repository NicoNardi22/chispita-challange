import axios from "axios";
import { GetServerSideProps } from "next";
import { useState, useEffect } from "react";
import Head from "next/head";
import Router from "next/router";
import type { Data } from "./api/home";
import type { FooterData } from "./api/footer";
import type { NextPage } from "next";
import Hero from "../lib/Hero";
import NavBar from "../lib/Navbar";
import Loading from "../lib/icons/Loading";
import Phrasing from "../lib/Phrasing";
import Footer from "../lib/Footer";
import Greeting from "../lib/Greeting";
import HotelSectionMobile from "../lib/HotelSectionMobile";
import UserContext from "../lib/UserContext";
import { useContext } from "react";
import HotelSectionDesktop from "../lib/HotelSectionDesktop";

interface Props {
  navUrls: {
    urls: string[];
  };
  landing: Data;
  footerData: FooterData;
}

const Home: NextPage<Props> = ({ navUrls, landing, footerData }) => {
  const [loading, setLoading] = useState(false);
  const { screen } = useContext(UserContext);

  useEffect(() => {
    const start = () => {
      setLoading(true);
    };
    const end = () => {
      setLoading(false);
    };
    Router.events.on("routeChangeStart", start);
    Router.events.on("routeChangeComplete", end);
    Router.events.on("routeChangeError", end);
    return () => {
      Router.events.off("routeChangeStart", start);
      Router.events.off("routeChangeComplete", end);
      Router.events.off("routeChangeError", end);
    };
  }, []);

  return (
    <div>
      <Head>
        <title>Chispita Challange</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {loading ? (
          <div className="w-screen h-screen flex items-center justify-center">
            <h1 className="flex justify-center text-7xl font-bold">
              Loading
              <span>
                <Loading />
              </span>
            </h1>
          </div>
        ) : (
          <>
            <NavBar navUrls={navUrls}></NavBar>
            <Hero
              bannerDesktop={landing.bannerDesktop}
              bannerMobile={landing.bannerMobile}
            />
            <Phrasing />
            {/* Carousel desktop */}
            {/* Hotels info mobile */}
            {screen.width != undefined && screen.width >= 960 ? (
              <HotelSectionDesktop hotelSection={landing.hotelSection} />
            ) : (
              <HotelSectionMobile hotelSection={landing.hotelSection} />
            )}
            <Footer footerData={footerData} />
            <Greeting />
          </>
        )}
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { locale } = context;

  const emptyUrls: { urls: Array<string> } = { urls: [""] };
  const emptyLanding: Data = {
    bannerDesktop: [],
    bannerMobile: [],
    hotelSection: {
      title: "",
      detail: "",
      hotelsInfo: [],
    },
  };
  const emptyImg: { url: string; alt: string } = {
    url: "",
    alt: "",
  };
  const emptyFooter: FooterData = {
    logo: emptyImg,
    wording: "",
    networkIcons: {
      youtube: emptyImg,
      facebook: emptyImg,
      twitter: emptyImg,
      instagram: emptyImg,
    },
    us: {
      telephone: "",
      email: "",
    },
    urls: [""],
  };

  try {
    //url from page/api
    const resUrls = await axios("http://localhost:3000/api/nav");
    const navUrls = await resUrls.data;
    const enResUrls = await axios("http://localhost:3000/api/nav-en");
    const enNavUrls = await enResUrls.data;

    // landing data
    const resLanding = await axios("http://localhost:3000/api/home");
    const landing = await resLanding.data;
    const enResLanding = await axios("http://localhost:3000/api/home-en");
    const enLanding = await enResLanding.data;

    // Footer data
    const resFooter = await axios("http://localhost:3000/api/footer");
    const footerData = await resFooter.data;
    const enResFooter = await axios("http://localhost:3000/api/footer-en");
    const enFooterData = await enResFooter.data;

    if (locale === "es-AR") {
      return {
        props: { navUrls, landing, footerData },
      };
    } else {
      return {
        props: {
          navUrls: enNavUrls,
          landing: enLanding,
          footerData: enFooterData,
        },
      };
    }
  } catch (error) {
    console.error(error);
  }

  return {
    props: { emptyUrls, emptyLanding, emptyFooter },
  };
};

export default Home;
